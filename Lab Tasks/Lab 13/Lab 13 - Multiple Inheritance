// Lab 13
// Multiple Inheritance Lab

#include <iostream>

using namespace std;

class Moving_Van
{
protected:

	float payload;
	float weight;
	float mpg;

public:

	// Getters

	float getPayload()
	{
		return payload;
	}

	float getWeight()
	{
		return weight;
	}

	float getMpg()
	{
		return mpg;
	}

	// Setters

	void setPayload(float p)
	{
		this->payload = p;
	}

	void setWeight(float w)
	{
		this->weight = w;
	}

	void setMpg(float m)
	{
		this->mpg = m;
	}

	// Constructors

	Moving_Van() 
	{
		payload = 0.0;
		weight = 0.0;
		mpg = 0.0;
		cout << "Moving_Van Default Constructor" << endl;
	}

	Moving_Van(float payload, float weight, float mpg) 
	{
		this->payload = payload;
		this->weight = weight;
		this->mpg = mpg;
		cout << "Moving_Van Parameterized Constructor" << endl;
	}

	Moving_Van(const Moving_Van& obj) 
	{
		payload = obj.payload;
		weight = obj.weight;
		mpg = obj.mpg;
		cout << "Moving_Van Copy Constructor" << endl;
	}

	// Destructor

	~Moving_Van() 
	{
		cout << "Moving_Van Destructor" << endl;
	}

	// Member Functions

	void initialize(float p, float w, float m)
	{
		this->payload = p;
		this->weight = w;
		this->mpg = m;
	}

	float efficiency(const Moving_Van& obj)
	{
		return (obj.payload / (obj.payload + obj.weight));
	}

	float cost_per_ton(float fuel_cost)
	{
		return (fuel_cost / (payload / 2000.0));
	}
};

class Driver
{
protected:
	float hourly_pay;
	float weight;

public:

	// Getters

	float getHourlyPay()
	{
		return hourly_pay;
	}

	float getWeight()
	{
		return weight;
	}

	// Setters

	void setHourlyPay(float h)
	{
		this->hourly_pay = h;
	}

	void setWeight(float w)
	{
		this->weight = w;
	}

	// Constructors

	Driver() 
	{
		hourly_pay = 0.0;
		weight = 0.0;
		cout << "Driver Default Constructor" << endl;
	}

	Driver(float hourly_pay, float weight) 
	{
		this->hourly_pay = hourly_pay;
		this->weight = weight;
		cout << "Driver Parameterized Constructor" << endl;
	}

	Driver(const Driver& obj) 
	{
		hourly_pay = obj.hourly_pay;
		weight = obj.weight;
		cout << "Driver Copy Constructor" << endl;
	}

	// Destructor

	~Driver() 
	{
		cout << "Driver Destructor" << endl;
	}

	// Member Functions

	void initialize(float h, float w)
	{
		this->hourly_pay = h;
		this->weight = w;
	}

	float cost_per_mile(const Driver& obj)
	{
		return (obj.hourly_pay / 55.0);
	}

	float driver_weights()
	{
		return weight;
	}
};

class Driven_Truck : public Moving_Van, public Driver
{
public:

	// Constructors

	Driven_Truck() 
	{
		cout << "Driven_Truck Default Constructor" << endl;
	}

	Driven_Truck(float payload, float weight, float mpg, float hourly_pay) : Moving_Van(payload, weight, mpg), Driver(hourly_pay, weight) 
	{
		cout << "Driven_Truck Parameterized Constructor" << endl;
	}

	Driven_Truck(const Driven_Truck& obj) : Moving_Van(obj), Driver(obj) 
	{
		cout << "Driven_Truck Copy Constructor" << endl;
	}

	// Destructor

	~Driven_Truck() 
	{
		cout << "Driven_Truck Destructor" << endl;
	}

	// Member Functions

	void initialize(float p, float w1, float m, float h, float w2)
	{
		Moving_Van::payload = p;
		Moving_Van::weight = w1;
		Moving_Van::mpg = m;

		Driver::hourly_pay = h;
		Driver::weight = w2;
	}

	float cost_per_full_day(float cost_of_gas)
	{
		return ((8.0*Driver::hourly_pay + 8.0*cost_of_gas*55.0) / Moving_Van::mpg);
	}

	float total_weight()
	{
		return (Moving_Van::weight + Driver::weight);
	}
};

int main()
{
	Driven_Truck chuck_ford;
	
	chuck_ford.initialize(2000.0, 5000.0, 15.0, 20.0, 60.0);

	cout << "Efficiency: " << chuck_ford.efficiency(chuck_ford) << endl;
	cout << "Cost Per Mile: " << chuck_ford.cost_per_mile(chuck_ford) << endl;
	cout << "Cost Per Day: " << chuck_ford.cost_per_full_day(3.5) << endl;
	cout << "Total Weight: " << chuck_ford.total_weight() << endl;

	return 0;
}
